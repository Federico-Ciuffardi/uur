#!/usr/bin/env bash

source "/usr/lib/naylib"

build_dir="$HOME/.local/share/uur/builds"
repos_dir="$HOME/.local/share/uur/repos"
meta_dir="$HOME/.local/share/uur/meta"

EXE_NAME="uur"

NAME="Universal User Repository"

VERSION="0.1.0"

HELP_MSG="$NAME $VERSION

Usage: $EXE_NAME [<flags>] <command>

Flags:
  -v, --version  Output version information and exit
  -h, --help     Display this help and exit

Commands:
   update            Update the repositories
   list              Show the packages 
   install           Install packages
   upgrade           Upgrade packages
   native            Install a packages with the native package manager falling back to uur"

HELP_MSG_UPGRADE="$NAME $VERSION

Usage: $EXE_NAME upgrade [<flags>] 

Flags:
  -h, --help     Display this help and exit
  -f, --force    Upgrade even if it is already up to date"

HELP_MSG_LIST="$NAME $VERSION

Usage: $EXE_NAME list [<flags>] 

Flags:
  -h, --help       Display this help and exit
  -i, --installed  Show installed packages
  -v, --versions   Show installed packages and versions
  -a, --all        Show all available packages (no flag behaviour)
  -r, --repo       Show all the used repositories (check $repos_dir)
"


#########
# MISC  #
#########

## trap ctrl-c and call ctrl_c()
trap ctrl_c INT
function ctrl_c() {
        printf "\n\nAborted, exiting...\n"
        exit 127
}


###########
# Setters #
###########

function set_pkg(){
  package="$1"

  package_spec_dir="$repos_dir/$package"

  if ! [ -d $package_spec_dir ] ; then
    echo "No package \"$package\""
    return 1
  fi

  package_version_file="$meta_dir/$package/installed_version"
  package_build_dir="$build_dir/$package"
}

#########
# Utils #
#########

function make(){
  if [ -f "$package_spec_dir/imake" ] ; then 
    sudo -v
    bash "$package_spec_dir/imake"
  fi
  if [ -f "$package_spec_dir/make" ] ; then 
    sudo -v
    draw_spinner "Making \"$package\"" "bash "$package_spec_dir/make""
  fi
}

############
# Commands #
############

function native(){
  local -r pkg="$1"
  local -r msg="${2:-"Installing dependency:"}"

  package_manager=""

  case "$distro_name" in
    Arch)
      if [ -d "$repos_dir/$pkg" ] ; then
        if ! [ -f "$meta_dir/$pkg/installed_version" ] ; then
          package_manager="uur install"
        fi
      elif command -v yay &> /dev/null ; then
        if ! yay -Q "$pkg" &> /dev/null ; then
          if yay -Sqg "$pkg" &> /dev/null ; then 
            for gpkg in `yay -Sqg "$pkg"` ; do
              if ! yay -Q "$gpkg" &> /dev/null ; then 
                package_manager="yay -S --noconfirm --needed"
              fi
            done
          else # if yay -Ssq "$pkg" 2>/dev/null | grep "^$pkg$" &> /dev/null ; then
            package_manager="yay -S --noconfirm --needed"
          fi
        fi
      else
        if ! pacman -Q "$pkg" &> /dev/null ; then
          if pacman -Sqg "$pkg" &> /dev/null ; then 
            for gpkg in `pacman -Sqg "$pkg"` ; do
              if ! pacman -Q "$gpkg" &> /dev/null ; then 
                package_manager="sudo pacman -S --noconfirm --needed"
              fi
            done
          else # if pacman -Ssq "$pkg" 2>/dev/null | grep "^$pkg$" &> /dev/null ; then
            package_manager="sudo pacman -S --noconfirm --needed"
          fi
        fi
      fi
      ;;
    Ubuntu|Termux)
      if apt-cache search "$pkg" | grep "^$pkg " &> /dev/null ; then
        if ! dpkg -s "$pkg" &>/dev/null ; then
          package_manager="sudo apt install -y"
        fi
      else
        if ! [ -f "$meta_dir/$pkg/installed_version" ] ; then
          package_manager="uur install"
        fi
      fi
      ;;
    *) 
      echo "Unsuported distro \"$distro_name\""
      return 1
      ;;
  esac
  if [ "$package_manager" != "" ] ; then
    sudo -v
    draw_spinner "$msg $pkg" "$package_manager $pkg" || return 1
  fi
}

function upgrade(){
  pkg=""
  force="${force:-false}"

  while [ $# -gt 0 ]; do
    case "$1" in
      -h|--help)
        echo "$HELP_MSG_UPGRADE"
        exit 0
        ;;
      -f|--force)
        force="true"
        ;;
      -*)
        echo "'$1' is not a $EXE_NAME $0 flag. See '$EXE_NAME $0 --help'."
        exit 2
        ;;
      *)
        pkg=$1
        ;;
    esac
    shift
  done

  # Upgrade all
  if [ "$pkg" = "" ] ; then
    for pkg in $(list -i) ; do
      upgrade $pkg
    done
    return $?
  fi

  # Upgrade one
  set_pkg $pkg || return $?
  if ! [ -f $package_version_file ] ; then
    echo "\"$package\" not installed"
    return 1
  fi

  echo "Upgrading package \"$package\""

  # go to data/bin/build path
  cd "$package_build_dir"

  # upgrade package
  if [ -f "$package_spec_dir/git" ] ; then
    git_url=$(head -n1 "$package_spec_dir/git")
    if [ -d git_src ] ; then 
      draw_spinner "Pulling" "git -C git_src pull" || return 1
    fi
    new_update_id=$(git -C git_src rev-parse HEAD)
  elif [ -f "$package_spec_dir/ver" ] ; then
    new_update_id=$(cat "$package_spec_dir/ver")
  else
    new_update_id="no_id"
  fi

  if ! $force && [ "$new_update_id" = $(cat "$package_version_file") ] ; then
    echo "\"$package\" already up to date"
    return 0
  fi

  make || exit 1

  echo "$new_update_id" > "$meta_dir/$package/installed_version"

  # go back to repos_dir
  cd "$repos_dir"

}

function install(){
  set_pkg $1 || return $?
  if [ -f $package_version_file ] ; then
    echo "\"$package\" already installed"
    return 0
  fi

  echo "Installing package \"$package\""

  # go to data/bin/build path
  mkdir -p "$package_build_dir"
  cd "$package_build_dir"

  # install package dependencies
  deps_file="$package_spec_dir/deps/$distro_name"
  if [ -f "$deps_file" ] ; then 
    for dep in $(cat "$deps_file") ; do
      native $dep
      [ $? -eq 0 ] || return 1
    done
  fi

  # install package
  if [ -f "$package_spec_dir/git" ] ; then
    git_url=$(head -n1 "$package_spec_dir/git")
    if ! [ -d git_src ] ; then 
      draw_spinner "Cloning" "git clone $git_url git_src" || return 1
    fi
    update_id=$(git -C git_src rev-parse HEAD)
  else
    update_id="no_id"
  fi

  make || exit 1

  mkdir -p "$meta_dir/$package"
  echo "$update_id" > "$meta_dir/$package/installed_version"

  # go back to repos_dir
  cd "$repos_dir"
}

function list_all_pkg(){
  for repo_name in $(ls) ; do
    for pkg_name in $(ls "$repo_name") ; do
      echo "$repo_name/$pkg_name"
    done
  done

}

function list(){
  cd "$repos_dir"

  if [ $# -eq 0 ] ; then
    list_all_pkg
  fi

  while [ $# -gt 0 ]; do
    case "$1" in
      -h|--help)
        echo "$HELP_MSG_LIST"
        exit 0
        ;;
      -i|--installed)
        for repo_name in $(ls) ; do
          for pkg_name in $(ls "$repo_name") ; do
            version_file="$meta_dir/$repo_name/$pkg_name/installed_version"
            if [ -f "$version_file" ] ; then
              echo "$repo_name/$pkg_name"
            fi
          done
        done
        return 0
        ;;
      -v|--versions)
        for repo_name in $(ls) ; do
          for pkg_name in $(ls "$repo_name") ; do
            version_file="$meta_dir/$repo_name/$pkg_name/installed_version"
            if [ -f "$version_file" ] ; then
              echo "$repo_name/$pkg_name : $(cat $version_file)"
            fi
          done
        done
        return 0
        ;;
      -a|--all)
        list_all_pkg
        return 0
        ;;
      -r|--repo)
        for repo_name in $(ls) ; do
          echo "$repo_name"
        done
        return 0
        ;;

      -*)
        echo "'$1' is not a \"$EXE_NAME list\" flag. See '$EXE_NAME --help'."
        return 2
        ;;
    esac
  shift
  done
}

########
# MAIN #
########
if [[ ${DEBUG-} =~ ^1|yes|true$ ]]; then
    set -o xtrace       # Trace the execution of the script (debug)
fi

set -o nounset      # Disallow expansion of unset variables
set -o pipefail     # Use last non-zero exit code in a pipeline
set -o errtrace     # Ensure the error trap handler is inherited

uur_config_dir="$HOME/.config/uur"
mkdir -p "$uur_config_dir"

uur_repos_file="$uur_config_dir/repos"
if ! [ -f $uur_repos_file ] ; then 
  echo "https://github.com/Federico-Ciuffardi/uur-repo-main" > $uur_repos_file
fi

mkdir -p "$build_dir"
mkdir -p "$repos_dir"
mkdir -p "$meta_dir"

while [ $# -gt 0 ]; do
  case "$1" in
    -h|--help)
      echo "$HELP_MSG"
      exit 0
      ;;
    -v|--version)
      echo "$NAME $VERSION"
      exit 0
      ;;
    update)
      cd "$repos_dir"
      for repo_url in $(cat $uur_repos_file) ; do
        repo_name=${repo_url##*-}
        repo_dir="$repos_dir/$repo_name"
        if [ ! -d $repo_dir ] ; then
          draw_spinner "Updating \"$repo_name\"" "git clone $repo_url" $repo_name
        else
          draw_spinner "Updating \"$repo_name\"" "git -C $repo_dir pull" 
        fi
      done
      exit $?
      ;;
    list)
      $@
      exit 0
      ;;
    install|upgrade|native)
      distro_name=$(lsb_release -i | sed 's/.*:\s*//g')
      $@
      exit $?
      ;;
    -*)
      echo "'$1' is not a $EXE_NAME flag. See '$EXE_NAME --help'."
      exit 2
      ;;
    *)
      echo "'$1' is not a $EXE_NAME command. See '$EXE_NAME --help'."
      exit 2
      ;;
  esac
  shift
done

printf "missing command\nTry '$EXE_NAME --help' for more information.\n"
